import random
import streamlit as st

from nav import navi

st.set_page_config(
    page_title="RSA",
    page_icon="üîê",
    layout="wide"
)

navi()

st.markdown("""
    <style>
         textarea {
            color: #fb6f92 !important;
         }
    </style>
""", unsafe_allow_html=True)

st.header("Welcome to Simple Diffie Hellman!üîê")
st.header('Diffie Hellman', divider='rainbow')

on = st.toggle("Show History")

if on:
    st.write('The Diffie-Hellman key exchange, introduced by Whitfield Diffie and Martin Hellman in 1976, revolutionized modern cryptography by enabling secure communication over insecure channels without the need for pre-shared secrets. Their groundbreaking paper, "New Directions in Cryptography," laid the foundation for public-key cryptography, paving the way for the development of secure internet communication protocols and serving as a cornerstone in the field of modern cryptography.')

# Function to generate private number
def generate_private_number(p):
    return random.randint(1, p - 1)

# Function to generate public key
def generate_public_key(private_key, p, g):
    return pow(g, private_key, p)

# Function to generate shared secret
def generate_shared_secret(private_key, public_key, p):
    return pow(public_key, private_key, p)

# Function to encrypt message
def encrypt_message(message, shared_secret):
    encrypted_message = ''.join(chr(ord(c) ^ shared_secret) for c in message)
    return encrypted_message

# Function to decrypt message
def decrypt_message(encrypted_message, shared_secret):
    message = ''.join(chr(ord(c) ^ shared_secret) for c in encrypted_message)
    return message

# Parameters
p = 100043
g = 100003

st.write("Bob and Alice agreement:", g, "mod", p)

# Generate private keys
alice_private_num = generate_private_number(p)
bob_private_num = generate_private_number(p)

# Generate public keys
alice_public_key = generate_public_key(alice_private_num, p, g)
bob_public_key = generate_public_key(bob_private_num, p, g)

# Generate shared secrets
alice_shared_secret = generate_shared_secret(alice_private_num, bob_public_key, p)
bob_shared_secret = generate_shared_secret(bob_private_num, alice_public_key, p)

# The shared secrets generated by both parties should be the same
assert alice_shared_secret == bob_shared_secret

# UI for encryption
st.subheader("Encryption")
message = st.text_input("Enter your message:")
if st.button("Encrypt Message"):
    encrypted_message = encrypt_message(message, alice_shared_secret)
    st.write("Encrypted Message:", encrypted_message)

# UI for decryption
st.subheader("Decryption")
encrypted_message = st.text_input("Enter the encrypted message:")
if st.button("Decrypt Message"):
    decrypted_message = decrypt_message(encrypted_message, bob_shared_secret)
    st.write("Decrypted Message:", decrypted_message)